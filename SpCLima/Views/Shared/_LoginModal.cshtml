@model SpClima.ViewModels.LoginVM

<div class="modal fade modal-admin" id="loginModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog modal-sm modal-dialog-centered">
    <div class="modal-content">

      <form id="loginForm" asp-controller="Account" asp-action="Login" method="post">
        <div class="modal-header">
          <h5 class="modal-title">Login Admin</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
        <div id="loginErrorMessage" class="text-danger mt-2" style="display: none;"></div>
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
          <input asp-for="ReturnUrl" type="hidden" />
          <input type="hidden"
                asp-for="ReturnUrl"
                value="@Url.Action("Index", "Admin", new { area = "Admin" })" />
          <div class="mb-3">
            <label asp-for="Username" class="form-label"></label>
            <input asp-for="Username" class="form-control" />
            <span asp-validation-for="Username" class="text-danger"></span>
          </div>
          <div class="mb-3">
            <label asp-for="Password" class="form-label"></label>
            <input asp-for="Password" type="password" class="form-control" />
            <span asp-validation-for="Password" class="text-danger"></span>
          </div>
        </div>
        <div class="modal-footer">
          <button type="submit" class="btn btn-primary">Entrar</button>
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
        </div>
      </form>
    </div>
  </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const loginForm = document.getElementById('loginForm');
        // Pega a referência do elemento de erro que acabamos de criar
        const errorMessageDiv = document.getElementById('loginErrorMessage');

        if (loginForm) {
            loginForm.addEventListener("submit", function(e) {
                e.preventDefault(); // Impede o envio padrão do formulário

                // Esconde mensagens de erro antigas antes de uma nova tentativa
                if (errorMessageDiv) {
                    errorMessageDiv.style.display = 'none';
                }
                
                const formData = new FormData(this);
                const url = this.action;
                
                // Pega o token anti-falsificação gerado pelo @Html.AntiForgeryToken()
                const antiForgeryToken = document.querySelector('input[name="__RequestVerificationToken"]').value;

                fetch(url, {
                    method: 'POST',
                    body: formData, // O .NET Core consegue ler FormData diretamente
                    headers: {
                        // O cabeçalho 'RequestVerificationToken' é ESSENCIAL para o [ValidateAntiForgeryToken] funcionar com fetch
                        'RequestVerificationToken': antiForgeryToken
                    }
                })
                .then(response => {
                    // Se a resposta do servidor não for OK (ex: erro 500), lança um erro
                    if (!response.ok) {
                        throw new Error('Falha na comunicação com o servidor. Status: ' + response.status);
                    }
                    // Se a resposta for OK, o corpo DEVE ser JSON. Vamos lê-lo.
                    return response.json();
                })
                .then(data => {
                    // Agora 'data' é o objeto JSON que o seu controller enviou
                    if (data.success) {
                        // SUCESSO: redireciona para a URL fornecida pelo backend
                        window.location.href = data.redirectUrl;
                    } else {
                        // FALHA: exibe a mensagem de erro do backend no nosso div
                        if (errorMessageDiv) {
                            errorMessageDiv.textContent = data.message;
                            errorMessageDiv.style.display = 'block'; // Torna o div de erro visível
                        }
                    }
                })
                .catch(error => {
                    // Este bloco pega erros de rede ou qualquer erro lançado acima
                    console.error('Erro na requisição de login:', error);
                    if (errorMessageDiv) {
                        errorMessageDiv.textContent = 'Ocorreu um erro inesperado. Tente novamente.';
                        errorMessageDiv.style.display = 'block';
                    }
                });
            });
        }
    });
</script>
